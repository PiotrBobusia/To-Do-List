@model To_Do_List.Models.DTOs.ToDoTaskDTO

@{
    ViewData["Title"] = "Add New Task";
}

<h1>Add New Task</h1>


<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddTask">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Priority" class="control-label"></label>
                <select asp-for="Priority" name="Priority" class="form-select">
                    @{
                        foreach(Priority item in Enum.GetValues(typeof(Priority)))
                        {
                            <option value="@item">@item.ToString()</option>
                        }
                    }
                </select>
            </div>
            <br/>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input asp-for="Date" class="form-control" type="date" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <br/>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
